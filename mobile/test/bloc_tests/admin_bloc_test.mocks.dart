// Mocks generated by Mockito 5.4.1 from annotations
// in charge_station_finder/test/bloc_tests/admin_bloc_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:charge_station_finder/domain/admin/admin_model.dart' as _i3;
import 'package:charge_station_finder/infrastructure/admin/admin_provider.dart'
    as _i2;
import 'package:charge_station_finder/infrastructure/admin/admin_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdminProvider_0 extends _i1.SmartFake implements _i2.AdminProvider {
  _FakeAdminProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdminDomain_1 extends _i1.SmartFake implements _i3.AdminDomain {
  _FakeAdminDomain_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AdminRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdminRepository extends _i1.Mock implements _i4.AdminRepository {
  MockAdminRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AdminProvider get adminProvider => (super.noSuchMethod(
        Invocation.getter(#adminProvider),
        returnValue: _FakeAdminProvider_0(
          this,
          Invocation.getter(#adminProvider),
        ),
      ) as _i2.AdminProvider);
  @override
  set adminProvider(_i2.AdminProvider? _adminProvider) => super.noSuchMethod(
        Invocation.setter(
          #adminProvider,
          _adminProvider,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> createUser(_i3.AdminDomain? adminDomain) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [adminDomain],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> editUser(_i3.AdminDomain? adminDomain) =>
      (super.noSuchMethod(
        Invocation.method(
          #editUser,
          [adminDomain],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteUser(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i3.AdminDomain>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.AdminDomain>>.value(<_i3.AdminDomain>[]),
      ) as _i5.Future<List<_i3.AdminDomain>>);
  @override
  _i5.Future<_i3.AdminDomain> getUser(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i5.Future<_i3.AdminDomain>.value(_FakeAdminDomain_1(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.AdminDomain>);
}
